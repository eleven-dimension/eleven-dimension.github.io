<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>leetcode 169 多数元素</title>
    <link href="/post/be4ef6ff.html"/>
    <url>/post/be4ef6ff.html</url>
    
    <content type="html"><![CDATA[<h1 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h1><p>给定$;n;$个数，其中有某个数的出现次数<strong>大于</strong>$;\lfloor \frac{n}{2} \rfloor ;$，求这个数。</p><h1 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h1><p>把这些数分成两个阵营，一个由每一个众数（即所求）组成，另一个由其他所有非众数组成。由题意知前一个阵营人数大于后一个。考虑维护一个候选众数$;candidate;$以及它出现的次数$;count;$，初始候选众数任意，出现次数为$;0;$。接下来扫描这$;n;$个数，如果被扫到的数$;x;$是当前候选众数，$;count;$加一，否则减一，如果$;count;$被减到$;0;$以下，将候选众数更新为$;x;$。最终的候选众数即为所求。</p><p>可以将整个过程想象为打擂台，和擂主（当前候选众数）相同的站到台上来，不同的干掉台上一个人，同归于尽。最坏的情况是非众数阵营内部没有发生同归于尽，同归于尽只发生在两个阵营之间，但即便如此众数阵营仍会因为数量多获胜。</p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight cpp"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">majorityElement</span><span class="hljs-params">(vector&lt;<span class="hljs-keyword">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> candidate = <span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> num : nums) &#123;<br>            <span class="hljs-keyword">if</span> (num == candidate)<br>                ++count;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (--count &lt; <span class="hljs-number">0</span>) &#123;<br>                candidate = num;<br>                count = <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> candidate;<br>    &#125;<br>&#125;;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Solution</category>
      
    </categories>
    
    
    <tags>
      
      <tag>摩尔投票</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Czs nb!</title>
    <link href="/post/59d544d.html"/>
    <url>/post/59d544d.html</url>
    
    <content type="html"><![CDATA[<h1 id="为什么说操作数是神？"><a href="#为什么说操作数是神？" class="headerlink" title="为什么说操作数是神？"></a>为什么说操作数是神？</h1><figure class="highlight cpp"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) cout &lt;&lt; <span class="hljs-string">&quot;czsnb&quot;</span>;<br></code></pre></td></tr></table></figure><p>$$<br>\large{Czs NB \cdot czsnb}<br>$$</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
