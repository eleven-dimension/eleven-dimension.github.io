<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>八卦基础</title>
    <link href="/post/f1103434.html"/>
    <url>/post/f1103434.html</url>
    
    <content type="html"><![CDATA[<h1 id="坎"><a href="#坎" class="headerlink" title="坎"></a>坎</h1><p>坎为水，为一，居北方，色黑。表流动，寒冷，月亮，落陷。地支子水。</p><h1 id="坤"><a href="#坤" class="headerlink" title="坤"></a>坤</h1><p>坤为地，为二，居西南，属土，色黄。坤为地，表包容，柔顺。地支未申。</p><h1 id="震"><a href="#震" class="headerlink" title="震"></a>震</h1><p>震为雷，为三，居东方，属木，色碧青。表动，运动。地支卯木。</p><h1 id="巽"><a href="#巽" class="headerlink" title="巽"></a>巽</h1><p>巽为风，为四，居东南，属木，色白。表示不稳定。地支辰巳。</p><h1 id="乾"><a href="#乾" class="headerlink" title="乾"></a>乾</h1><p>乾为天，为六，居西北，属金，色白。表示首脑，强健。地支戌亥。</p><h1 id="兑"><a href="#兑" class="headerlink" title="兑"></a>兑</h1><p>兑为泽，为七，居西方，属金，色白。表示口，说话，盆，洞，海，悦。地支酉金。</p><h1 id="艮"><a href="#艮" class="headerlink" title="艮"></a>艮</h1><p>艮为山，为八，居东北，属土，色黄。表示隆起，静止。地支丑寅。</p><h1 id="离"><a href="#离" class="headerlink" title="离"></a>离</h1><p>离为火，为九，居南方，属火，色红。表示热，中空，美丽。地支午火。</p><p><img src="https://s2.loli.net/2022/02/06/l7Spacy61BEtuHG.png" alt="地盘图"></p>]]></content>
    
    
    <categories>
      
      <category>QimenDunjia</category>
      
    </categories>
    
    
    <tags>
      
      <tag>bagua</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>leetcode 414 第三大的数</title>
    <link href="/post/63603c43.html"/>
    <url>/post/63603c43.html</url>
    
    <content type="html"><![CDATA[<h1 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h1><p>求出一个数组第三个大的数，相同的数只算一个，如果没有第三大的数，输出最大数。</p><h1 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h1><p>维护当前最大值，次大值，第三大值。扫描每个数，更新它们。注意，最终判断第三大值是否为负无穷。</p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight cpp"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">thirdMax</span><span class="hljs-params">(vector&lt;<span class="hljs-keyword">int</span>&gt; &amp;nums)</span> </span>&#123;<br>        <span class="hljs-keyword">long</span> a = LONG_MIN, b = LONG_MIN, c = LONG_MIN;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">long</span> num : nums) &#123;<br>            <span class="hljs-keyword">if</span> (num &gt; a) &#123;<br>                c = b;<br>                b = a;<br>                a = num;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (a &gt; num &amp;&amp; num &gt; b) &#123;<br>                c = b;<br>                b = num;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (b &gt; num &amp;&amp; num &gt; c) &#123;<br>                c = num;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> c == LONG_MIN ? a : c;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Solution</category>
      
    </categories>
    
    
    <tags>
      
      <tag>模拟</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>leetcode 第278场周赛</title>
    <link href="/post/b4b36af5.html"/>
    <url>/post/b4b36af5.html</url>
    
    <content type="html"><![CDATA[<h1 id="挖坑"><a href="#挖坑" class="headerlink" title="挖坑"></a>挖坑</h1>]]></content>
    
    
    <categories>
      
      <category>Solution</category>
      
    </categories>
    
    
    <tags>
      
      <tag>力扣周赛</tag>
      
      <tag>搜索</tag>
      
      <tag>字符哈希</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>leetcode 1763 最长的美好子字符串</title>
    <link href="/post/3abd74a8.html"/>
    <url>/post/3abd74a8.html</url>
    
    <content type="html"><![CDATA[<h1 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h1><p>当一个字符串 $s$ 包含的每一种字母的大写和小写形式<strong>同时</strong>出现在 $s$ 中，就称这个字符串 $s$ 是美好字符串。求出给定字符串 $s$ 最长的美好子字符串。</p><h1 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h1><h2 id="法一-枚举"><a href="#法一-枚举" class="headerlink" title="法一 枚举"></a>法一 枚举</h2><p>由于字符只有出现与不出现的区别，与出现次数无关，使用二进制数表示 $26$ 个字母的出现情况。枚举子串左端点，对于给定的某一左端点，顺序枚举右端点，只需 $O(1)$ 时间判断当前子串小写与大写出现情况是否相同。</p><h2 id="法二-分治"><a href="#法二-分治" class="headerlink" title="法二 分治"></a>法二 分治</h2><p>挖坑</p><h2 id="法三-滑动窗口"><a href="#法三-滑动窗口" class="headerlink" title="法三 滑动窗口"></a>法三 滑动窗口</h2><p>挖坑</p><h1 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h1><h2 id="法一-枚举-1"><a href="#法一-枚举-1" class="headerlink" title="法一 枚举"></a>法一 枚举</h2><figure class="highlight cpp"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">string <span class="hljs-title">longestNiceSubstring</span><span class="hljs-params">(string s)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> n = s.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">int</span> maxPos = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> maxLen = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>            <span class="hljs-keyword">int</span> lower = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">int</span> upper = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i; j &lt; n; ++j) &#123;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-built_in">islower</span>(s[j])) &#123;<br>                    lower |= <span class="hljs-number">1</span> &lt;&lt; (s[j] - <span class="hljs-string">&#x27;a&#x27;</span>);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    upper |= <span class="hljs-number">1</span> &lt;&lt; (s[j] - <span class="hljs-string">&#x27;A&#x27;</span>);<br>                &#125;<br>                <span class="hljs-keyword">if</span> (lower == upper &amp;&amp; j - i + <span class="hljs-number">1</span> &gt; maxLen) &#123;<br>                    maxPos = i;<br>                    maxLen = j - i + <span class="hljs-number">1</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> s.<span class="hljs-built_in">substr</span>(maxPos, maxLen);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="法二-分治-1"><a href="#法二-分治-1" class="headerlink" title="法二 分治"></a>法二 分治</h2><p>挖坑</p><h2 id="法三-滑动窗口-1"><a href="#法三-滑动窗口-1" class="headerlink" title="法三 滑动窗口"></a>法三 滑动窗口</h2><p>挖坑</p>]]></content>
    
    
    <categories>
      
      <category>Solution</category>
      
    </categories>
    
    
    <tags>
      
      <tag>位运算</tag>
      
      <tag>分治</tag>
      
      <tag>滑动窗口</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>leetcode 395 至少有 K 个重复字符的最长子串</title>
    <link href="/post/e8a0b9be.html"/>
    <url>/post/e8a0b9be.html</url>
    
    <content type="html"><![CDATA[<h1 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h1><p>给你一个字符串 $s$ 和一个整数 $k$ ，找出 $s$ 中的最长子串，要求该子串中的每一字符出现次数都不少于 $k$ 。返回这一子串的长度。</p><h1 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h1><h2 id="法一-分治"><a href="#法一-分治" class="headerlink" title="法一 分治"></a>法一 分治</h2><p>如果某个字符在整个字符串中的出现次数不足 $k$ ，那么任意一个包含这个字符的子串都不可能满足条件。这就好像整个字符串被这个字符分割成了几个子段，满足条件的子串只可能在子段中取。反之，如果该字符串中所有字符出现次数都不少于 $k$ ，那么该串即符合条件，可以去更新最值。考虑使用分支递归。</p><h2 id="法二-滑动窗口"><a href="#法二-滑动窗口" class="headerlink" title="法二 滑动窗口"></a>法二 滑动窗口</h2><p>挖坑</p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><h2 id="法一-分治-1"><a href="#法一-分治-1" class="headerlink" title="法一 分治"></a>法一 分治</h2><figure class="highlight cpp"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></div></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">const</span> string&amp; s, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, <span class="hljs-keyword">int</span> k)</span> </span>&#123;<br>        <span class="hljs-function">vector&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">cnt</span><span class="hljs-params">(<span class="hljs-number">26</span>, <span class="hljs-number">0</span>)</span></span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = l; i &lt;= r; i++) &#123;<br>            cnt[s[i] - <span class="hljs-string">&#x27;a&#x27;</span>]++;<br>        &#125;<br><br>        <span class="hljs-keyword">char</span> split = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">26</span>; i++) &#123;<br>            <span class="hljs-keyword">if</span> (cnt[i] &gt; <span class="hljs-number">0</span> &amp;&amp; cnt[i] &lt; k) &#123;<br>                split = i + <span class="hljs-string">&#x27;a&#x27;</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (split == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> r - l + <span class="hljs-number">1</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">int</span> i = l;<br>        <span class="hljs-keyword">int</span> ret = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (i &lt;= r) &#123;<br>            <span class="hljs-keyword">while</span> (i &lt;= r &amp;&amp; s[i] == split) &#123;<br>                i++;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (i &gt; r) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">int</span> start = i;<br>            <span class="hljs-keyword">while</span> (i &lt;= r &amp;&amp; s[i] != split) &#123;<br>                i++;<br>            &#125;<br><br>            <span class="hljs-keyword">int</span> length = <span class="hljs-built_in">dfs</span>(s, start, i - <span class="hljs-number">1</span>, k);<br>            ret = <span class="hljs-built_in">max</span>(ret, length);<br>        &#125;<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">longestSubstring</span><span class="hljs-params">(string s, <span class="hljs-keyword">int</span> k)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> n = s.<span class="hljs-built_in">length</span>();<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">dfs</span>(s, <span class="hljs-number">0</span>, n - <span class="hljs-number">1</span>, k);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="法二-滑动窗口-1"><a href="#法二-滑动窗口-1" class="headerlink" title="法二 滑动窗口"></a>法二 滑动窗口</h2><p>挖坑</p>]]></content>
    
    
    <categories>
      
      <category>Solution</category>
      
    </categories>
    
    
    <tags>
      
      <tag>分治</tag>
      
      <tag>滑动窗口</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2022年1月31日除夕与父象棋对局</title>
    <link href="/post/cbf25262.html"/>
    <url>/post/cbf25262.html</url>
    
    <content type="html"><![CDATA[<ol><li>炮二平五 &nbsp; 马２进３</li><li>马二进三 &nbsp; 炮２平１</li><li>炮八平七 &nbsp; 车１平２</li></ol> <div align="center">       <img src="https://s2.loli.net/2022/01/31/J8G5OB7AYTgMHQv.png" width="50%" height="50%">   </div>   如图形成中炮对右三步虎的局面。    <ol start="4"><li>马八进九 &nbsp; 马８进７</li><li>车一平二 &nbsp; 车９平８</li><li>车九进一 &nbsp; 卒７进１</li><li>车二进四 &nbsp; 炮８平９</li><li>车二平四 &nbsp; 士６进５</li><li>兵九进一 &nbsp; 车２进４</li><li>马九进八 &nbsp; 马７进６ ?</li></ol> <div align="center">       <img src="https://s2.loli.net/2022/01/31/yaJMC5kwpUvVFqL.png" width="50%" height="50%">   </div>   如图，马７进６错着，以下红炮七平八，黑若炮9平6反打红车，兑车之后，红再马八进六踩双，黑失子；黑若车2平3，红则炮五平七，车3进2，车四进一，黑丢马。<ol start="11"><li><p>炮七进四 &nbsp;象７进５<br>红不察，打兵瞄象。</p></li><li><p>车九平六 &nbsp;炮９平６<br>红车瞄准象眼。</p></li><li><p>车六进七 &nbsp;马３退１<br>黑退马正着。</p></li><li><p>车四平五 &nbsp;马６进７</p></li><li><p>车五进二 &nbsp;炮６退１？</p></li></ol> <div align="center">       <img src="https://s2.loli.net/2022/01/31/NCx9j23DnAXlLBf.png" width="50%" height="50%">   </div>   <p> 如图，黑退炮打车，不佳。正着车2进1，车六平九，黑再退炮打车，将红车赶入绝地。</p><ol start="16"><li>车六退四 &nbsp;马７退６</li><li>车五退一？&emsp;车２平５</li></ol> <div align="center">       <img src="https://s2.loli.net/2022/01/31/dNz8SeWPGYVlDfp.png" width="50%" height="50%">   </div>  <p> 如图，红进五路车邀兑，不佳，失先。宜进六路车邀兑，保持中路攻势。</p><ol start="18"><li>炮五进三 炮６平７</li><li>马八进六 车８进３</li><li>马六进七 将５平６</li><li>车六平四 车８平３</li><li>车四进一 将６平５</li></ol> <div align="center">       <img src="https://s2.loli.net/2022/01/31/uXpedZgWClBEMKo.png" width="50%" height="50%">   </div>  <p> 如图，黑将归中，不佳，不如垫炮，之后红若兑马，黑有撑士打死红车的好手，红若不兑马，马死。</p><ol start="23"><li>车四平三 马１进３</li><li>车三进三 车３平５</li><li>炮五平二 马３进４</li><li>炮二进四 士５进６</li><li>车三进一 将５进１</li><li>车三平六？ 马４进５  </li></ol> <div align="center">       <img src="https://s2.loli.net/2022/01/31/6rzMXA5gJBv8KED.png" width="50%" height="50%">   </div>    如图，红破士，但丢中兵，得不偿失，不如退车保护中兵。而且车炮同在底线，为以后黑炮串打埋下了隐患。 <ol start="29"><li>马三进五 车５进３</li><li>相三进五 炮１进３？  </li></ol> <div align="center">       <img src="https://s2.loli.net/2022/01/31/hUJ59NjtCznl46K.png" width="50%" height="50%">   </div>  如图，第30回合，黑可退炮串打得子，黑不察。  <ol start="31"><li><p>车六退五 卒１进１</p></li><li><p>炮二退五 炮１进４</p></li><li><p>炮二平五 将５平６</p></li><li><p>炮五平四 将６平５</p></li><li><p>车六退二 车５平３</p></li><li><p>车六平九 炮１平２</p></li><li><p>车九进三 车３平５</p></li><li><p>车九退三 车５平９</p></li><li><p>车九平八 炮２平１</p></li><li><p>炮四平九 车９平５? </p><div align="center">      <img src="https://s2.loli.net/2022/01/31/85T3AHDqaybhKuo.png" width="50%" height="50%">  </div>    如图，黑送杀，红车将军，再炮沉底，杀。红亦未察。黑应飞开中象。</li><li><p>炮九进五? 将５平６</p></li><li><p>车八退二 炮１退３</p></li><li><p>车八进八 士６退５</p></li><li><p>炮九退一 将６退１</p></li><li><p>炮九平五 车５平６</p></li><li><p>仕四进五 车６退５</p></li><li><p>车八退五 炮１退５</p></li><li><p>炮五平八 车６进４</p></li><li><p>炮八进一 象３进１</p></li><li><p>炮八平九 炮１平５？</p><div align="center">    <img src="https://s2.loli.net/2022/01/31/8DG7skF2fxQHEMv.png" width="50%" height="50%">  </div> 黑炮平中，谬矣。平7守线可无虞。以下黑失炮。  </li><li><p>车八进六 将６进１</p></li><li><p>炮九退一 将６进１</p></li><li><p>车八平四 炮５平６</p></li><li><p>车四平二 *   </p></li></ol> <div align="center">        <img src="https://s2.loli.net/2022/01/31/8jeS7xhQTr15Ylq.png" width="50%" height="50%">   </div><p> 至此，黑失炮。红车炮带士，黑车双象无士，虽为高难残局，但红必胜。</p>]]></content>
    
    
    <categories>
      
      <category>Chinese Chess</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Chinese Chess</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>托福红书 wordlist 23</title>
    <link href="/post/df3523b.html"/>
    <url>/post/df3523b.html</url>
    
    <content type="html"><![CDATA[<p>acumen<br>anomaly<br>ardent<br>artisan<br>basin<br>cider<br>communal<br>conform<br>congenial<br>divert<br>errand<br>ethnic<br>exalted<br>Fahrenheit<br>faucet<br>flair<br>gregarious<br>intersection<br>irrigate<br>manifestation<br>outrageously<br>paucity<br>quarry<br>resemble<br>roam<br>scarcely<br>scruffy<br>shovel<br>shroud<br>silica<br>spontaneity<br>stout<br>sunlit<br>susceptible<br>willow  </p>]]></content>
    
    
    <categories>
      
      <category>English</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Toefl Words</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>leetcode 1314 矩阵区域和</title>
    <link href="/post/e631459b.html"/>
    <url>/post/e631459b.html</url>
    
    <content type="html"><![CDATA[<h1 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h1><p>给出一个矩阵，求以每个位置为中心，边长为$2k+1$的正方形区域内，覆盖到的原矩阵元素的总和。</p><h1 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h1><p>二维前缀和，前缀和矩阵留出第$0$行和第$0$列，注意正方形左上出界时，下标$(x, y)$应取为$(max(x, 0), max(y, 0))$。</p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight cpp"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    vector&lt;vector&lt;<span class="hljs-keyword">int</span>&gt;&gt; <span class="hljs-built_in">matrixBlockSum</span>(vector&lt;vector&lt;<span class="hljs-keyword">int</span>&gt;&gt;&amp; mat, <span class="hljs-keyword">int</span> k) &#123;<br>        <span class="hljs-keyword">int</span> n = mat.<span class="hljs-built_in">size</span>(), m = mat[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>();<br>        vector&lt;vector&lt;<span class="hljs-keyword">int</span>&gt;&gt; <span class="hljs-built_in">sum</span>(n + <span class="hljs-number">1</span>, vector&lt;<span class="hljs-keyword">int</span>&gt;(m + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>));<br>        vector&lt;vector&lt;<span class="hljs-keyword">int</span>&gt;&gt; <span class="hljs-built_in">ans</span>(n, vector&lt;<span class="hljs-keyword">int</span>&gt;(m, <span class="hljs-number">0</span>));<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j++) &#123;<br>                sum[i][j] = <br>                    sum[i - <span class="hljs-number">1</span>][j] + <br>                    sum[i][j - <span class="hljs-number">1</span>] - <br>                    sum[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>] + <br>                    mat[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>];<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">auto</span> get_sum = [&amp;](<span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j, <span class="hljs-keyword">int</span> k) &#123;<br>            <span class="hljs-keyword">return</span> <br>                sum[<span class="hljs-built_in">min</span>(i + k, n)][<span class="hljs-built_in">min</span>(j + k, m)] - <br>                sum[<span class="hljs-built_in">max</span>(<span class="hljs-number">0</span>, i - k - <span class="hljs-number">1</span>)][<span class="hljs-built_in">min</span>(j + k, m)] - <br>                sum[<span class="hljs-built_in">min</span>(i + k, n)][<span class="hljs-built_in">max</span>(j - k - <span class="hljs-number">1</span>, <span class="hljs-number">0</span>)] + <br>                sum[<span class="hljs-built_in">max</span>(<span class="hljs-number">0</span>, i - k - <span class="hljs-number">1</span>)][<span class="hljs-built_in">max</span>(<span class="hljs-number">0</span>, j - k - <span class="hljs-number">1</span>)]<br>            ;<br>        &#125;;<br>        <br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; m; j++) &#123;<br>                ans[i][j] = <span class="hljs-built_in">get_sum</span>(i + <span class="hljs-number">1</span>, j + <span class="hljs-number">1</span>, k);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Solution</category>
      
    </categories>
    
    
    <tags>
      
      <tag>二维前缀和</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>leetcode 1996 游戏中弱角色的数量</title>
    <link href="/post/91615ddf.html"/>
    <url>/post/91615ddf.html</url>
    
    <content type="html"><![CDATA[<h1 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h1><p>给出一些角色，每个角色有$ATK$和$DEF$属性，若存在另一个角色，它的两个属性值都严格大于自己的两个属性值，称自己为<strong>弱角色</strong>。求出这些角色中<strong>弱角色</strong>个数。</p><h1 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h1><p>如果属性仅有一个，直接排序或记录最大值，比较就可以得到答案。考虑对其中一个属性$ATK$排序，按降序遍历每一个角色，并记录已遍历过的角色的$DEF$最大值$maxD$，如果当前角色的$DEF$值小于$maxD$，答案加一。同时还需考虑$ATK$属性相同的那些角色，如果没有顺序地遍历这些角色，可能会出现$DEF$较小的角色被误认为弱角色的情况。这种情况当$maxD$来自于前面某一个$ATK$与当前角色$ATK$相同的角色时出现。所以对于$ATK$相同的角色，应该按照$DEF$升序排序。</p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight cpp"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">numberOfWeakCharacters</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-keyword">int</span>&gt;&gt;&amp; properties)</span> </span>&#123;<br>        <span class="hljs-built_in">sort</span>(properties.<span class="hljs-built_in">begin</span>(), properties.<span class="hljs-built_in">end</span>(), [](vector&lt;<span class="hljs-keyword">int</span>&gt;&amp; a, vector&lt;<span class="hljs-keyword">int</span>&gt;&amp; b) &#123;<br>            <span class="hljs-keyword">return</span> a[<span class="hljs-number">0</span>] == b[<span class="hljs-number">0</span>] ? a[<span class="hljs-number">1</span>] &lt; b[<span class="hljs-number">1</span>] : a[<span class="hljs-number">0</span>] &gt; b[<span class="hljs-number">0</span>];<br>        &#125;);<br>        <span class="hljs-keyword">int</span> maxD = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> player : properties) &#123;<br>            <span class="hljs-keyword">if</span> (player[<span class="hljs-number">1</span>] &lt; maxD) ans++;<br>            <span class="hljs-keyword">else</span> maxD = player[<span class="hljs-number">1</span>];<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="另解"><a href="#另解" class="headerlink" title="另解"></a>另解</h1><p>二维偏序，线段树，挖坑</p>]]></content>
    
    
    <categories>
      
      <category>Solution</category>
      
    </categories>
    
    
    <tags>
      
      <tag>排序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>leetcode 第277场周赛</title>
    <link href="/post/45b83178.html"/>
    <url>/post/45b83178.html</url>
    
    <content type="html"><![CDATA[<h1 id="T1-元素计数"><a href="#T1-元素计数" class="headerlink" title="T1 元素计数"></a>T1 元素计数</h1><p>for for，水题莫忘暴力</p><h1 id="T4-基于陈述统计最多好人数"><a href="#T4-基于陈述统计最多好人数" class="headerlink" title="T4 基于陈述统计最多好人数"></a>T4 基于陈述统计最多好人数</h1><h2 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h2><p>好人说真话，坏人不确定。给出$statements[i][j]$表示$i$号人对$j$号人的好坏评价，$0$坏$1$好。求好人最多有几个。</p><h2 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h2><p>由于总人数$n&lt;=15$，直接二进制枚举所有人的好坏情况，判断有无冲突即可。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight cpp"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">maximumGood</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-keyword">int</span>&gt;&gt;&amp; statements)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> n = statements.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> mask = <span class="hljs-number">1</span>; mask &lt; (<span class="hljs-number">1</span> &lt;&lt; n); ++mask) &#123;<br>            <span class="hljs-keyword">bool</span> check = [&amp;]() &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>                    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; n; ++j) &#123;<br>                        <span class="hljs-keyword">if</span> (i == j) &#123;<br>                            <span class="hljs-keyword">continue</span>;<br>                        &#125;<br>                        <span class="hljs-keyword">if</span> (statements[i][j] == <span class="hljs-number">0</span>) &#123;<br>                            <span class="hljs-keyword">if</span> ((mask &amp; (<span class="hljs-number">1</span> &lt;&lt; i)) &amp;&amp; (mask &amp; (<span class="hljs-number">1</span> &lt;&lt; j))) &#123;<br>                                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                            &#125;<br>                        &#125;<br>                        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (statements[i][j] == <span class="hljs-number">1</span>) &#123;<br>                            <span class="hljs-keyword">if</span> ((mask &amp; (<span class="hljs-number">1</span> &lt;&lt; i)) &amp;&amp; !(mask &amp; (<span class="hljs-number">1</span> &lt;&lt; j))) &#123;<br>                                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                            &#125;<br>                        &#125;<br>                    &#125;<br>                &#125;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;();<br>            <span class="hljs-keyword">if</span> (check) &#123;<br>                ans = <span class="hljs-built_in">max</span>(ans, __builtin_popcount(mask));<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Solution</category>
      
    </categories>
    
    
    <tags>
      
      <tag>位运算</tag>
      
      <tag>力扣周赛</tag>
      
      <tag>枚举</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>leetcode 264 丑数 II</title>
    <link href="/post/2f692029.html"/>
    <url>/post/2f692029.html</url>
    
    <content type="html"><![CDATA[<h1 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h1><p>定义因子只有$2$或$3$或$5$的数为丑数，求第$n$个丑数。</p><h1 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h1><h2 id="法一-最小堆"><a href="#法一-最小堆" class="headerlink" title="法一 最小堆"></a>法一 最小堆</h2><p>每次取出堆顶$x$，插入$2x,3x,5x$。<code>set</code>或<code>priority_queue</code>。复杂度$nlogn$。</p><h2 id="法二-动态规划"><a href="#法二-动态规划" class="headerlink" title="法二 动态规划"></a>法二 动态规划</h2><p>每个丑数，乘以$2$乘以$3$乘以$5$都能得到$3$个更大的丑数。反过来看每个丑数，都是由<strong>之前的某个丑数</strong>乘以$2$乘以$3$乘以$5$得到。为了得到$f[i]$是由哪一个推得，考虑维护$p_2p_3p_5$三个指针，分别指向当前乘以$2$乘以$3$乘以$5$之后可能更新最大丑数（即$f[i-1]$）的<strong>之前的某个丑数</strong>下标。</p><p>定义$f[i]$为第$i$个丑数，指针$p_x(x=2,3,5)$为<br>$$<br>    min\{j\} \quad s.t. \ f[j] \times x &gt; f[i - 1]<br>$$<br>每次求第$i$个丑数时，取<br>$$<br>    min\left\{<br>        f[p_x] \times x<br>    \right\}<br>$$<br>之后比较$f[i]$与$f[p_x] \times x(x=2,3,5)$，将对应的指针加一。</p><p>举例来看，第一个丑数$1$，有资格乘以$2$乘以$3$乘以$5$，取出$2$作为第二个丑数。之后，由于$1$已经乘以过$2$，$1$只有乘以$3$乘以$5$的资格（可能性）了，对应的操作就是$p_2$加一。</p><p>从另一个角度看，为什么这样选择$p_x$就一定是能更新最大丑数的最小下标呢？这是因为只有当$f[i]=f[p_x] \times x$时才会移动$p_x$。也就是说，对于任意一个小于$p_x$的下标$p$，$f[p] \times x$一定被考虑过了（已经出现在$f$里面了），自然也就无法超过$f[i - 1]$。</p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight cpp"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">nthUglyNumber</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>        <span class="hljs-function">vector&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">f</span><span class="hljs-params">(<span class="hljs-number">1700</span>, <span class="hljs-number">0</span>)</span></span>;<br>        <span class="hljs-keyword">int</span> p2 = <span class="hljs-number">1</span>, p3 = <span class="hljs-number">1</span>, p5 = <span class="hljs-number">1</span>;<br>        f[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i++) &#123;<br>            f[i] = <span class="hljs-built_in">min</span>(&#123;f[p2] * <span class="hljs-number">2</span>, f[p3] * <span class="hljs-number">3</span>, f[p5] * <span class="hljs-number">5</span>&#125;);<br>            <span class="hljs-keyword">if</span> (f[i] == f[p2] * <span class="hljs-number">2</span>) p2++;<br>            <span class="hljs-keyword">if</span> (f[i] == f[p3] * <span class="hljs-number">3</span>) p3++;<br>            <span class="hljs-keyword">if</span> (f[i] == f[p5] * <span class="hljs-number">5</span>) p5++;<br>        &#125;<br>        <span class="hljs-keyword">return</span> f[n];<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Solution</category>
      
    </categories>
    
    
    <tags>
      
      <tag>动态规划</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>leetcode 169 多数元素</title>
    <link href="/post/be4ef6ff.html"/>
    <url>/post/be4ef6ff.html</url>
    
    <content type="html"><![CDATA[<h1 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h1><p>给定$n$个数，其中有某个数的出现次数<strong>大于</strong>$\lfloor \frac{n}{2} \rfloor$，求这个数。</p><h1 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h1><p>把这些数分成两个阵营，一个由每一个众数（即所求）组成，另一个由其他所有非众数组成。由题意知前一个阵营人数大于后一个。考虑维护一个候选众数$candidate$以及它出现的次数$count$，初始候选众数任意，出现次数为$0$。接下来扫描这$n$个数，如果被扫到的数$x$是当前候选众数，$count$加一，否则减一，如果$count$被减到$0$以下，将候选众数更新为$x$。最终的候选众数即为所求。</p><p>可以将整个过程想象为打擂台，和擂主（当前候选众数）相同的站到台上来，不同的干掉台上一个人，同归于尽。最坏的情况是非众数阵营内部没有发生同归于尽，同归于尽只发生在两个阵营之间，但即便如此众数阵营仍会因为数量多获胜。</p><p>此方法即摩尔投票。</p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight cpp"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">majorityElement</span><span class="hljs-params">(vector&lt;<span class="hljs-keyword">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> candidate = <span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> num : nums) &#123;<br>            <span class="hljs-keyword">if</span> (num == candidate)<br>                ++count;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (--count &lt; <span class="hljs-number">0</span>) &#123;<br>                candidate = num;<br>                count = <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> candidate;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Solution</category>
      
    </categories>
    
    
    <tags>
      
      <tag>摩尔投票</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Czs nb!</title>
    <link href="/post/59d544d.html"/>
    <url>/post/59d544d.html</url>
    
    <content type="html"><![CDATA[<h1 id="为什么说操作数是神？"><a href="#为什么说操作数是神？" class="headerlink" title="为什么说操作数是神？"></a>为什么说操作数是神？</h1><figure class="highlight cpp"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) cout &lt;&lt; <span class="hljs-string">&quot;czsnb&quot;</span>;<br></code></pre></td></tr></table></figure><p>$$<br>\large{Czs NB \cdot czsnb}<br>$$</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
